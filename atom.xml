<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aier02</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aier02.com/"/>
  <updated>2019-01-08T07:08:42.580Z</updated>
  <id>http://aier02.com/</id>
  
  <author>
    <name>易安明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pytorch argparser</title>
    <link href="http://aier02.com/2019/01/07/pytorch_argparser/"/>
    <id>http://aier02.com/2019/01/07/pytorch_argparser/</id>
    <published>2019-01-07T07:27:16.595Z</published>
    <updated>2019-01-08T07:08:42.580Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p>argparse 是在pytorch中用于解析命令行参数和选项的标准模块，在编写main脚本时，常常有很多路径、选项等参数需要确定，为了提高代码的健壮性，需要提高命令选项用于修改main中的参数，而不至于为了修改参数而要打开源代码进行。</p><h3 id="一般步骤"><a class="markdownIt-Anchor" href="#一般步骤"></a> 一般步骤</h3><ul><li>import argparse 引用模块</li><li>parser=argparse.ArgumentParser(description=‘介绍该解释器’) 创建一个parser对象</li><li>parser.add_argument() 向解析器对象添加要关注的命令行参数和选项，一个add对应一个参数</li><li>parser.parse_args() 调用parse_args方法进行解析，即可使用</li></ul><p>###add_argument(name or flags…[, action][nargs],[ const],[ default],[ type], choices],[ required],[help],[ metavar],[dest])</p><p>其中：</p><p>name or flags：命令行参数名或者选项，如上面的address或者-p,–port.其中命令行参数如果没给定，且没有设置defualt，则出错。但是如果是选项的话，则设置为None</p><p>action:action=‘store_true’,表示若出现name命令参数，则设置该参数为True，若无出现，则默认为False，反之action=“store_false”，表示若出现则设置为False,否则默认为True.</p><p>nargs：命令行参数的个数，一般使用通配符表示，其中，’?‘表示只用一个，’*‘表示0到多个，’+'表示至少一个</p><p>default：默认值</p><p>type：参数的类型，默认是字符串string类型，还有float、int等类型</p><p>help：和ArgumentParser方法中的参数作用相似，出现的场合也一致</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;argparse 是在pytorch中用于解析命令行参数和选项的标准模块，在编写main脚本时，常常有很多路径、选项等参数需要确定，为了提高代码
      
    
    </summary>
    
      <category term="pytorch" scheme="http://aier02.com/categories/pytorch/"/>
    
    
      <category term="sensetime" scheme="http://aier02.com/tags/sensetime/"/>
    
      <category term="basic knowledge" scheme="http://aier02.com/tags/basic-knowledge/"/>
    
  </entry>
  
  <entry>
    <title>label smoothing</title>
    <link href="http://aier02.com/2019/01/07/label-smoothing/"/>
    <id>http://aier02.com/2019/01/07/label-smoothing/</id>
    <published>2019-01-07T03:44:48.760Z</published>
    <updated>2019-01-07T03:44:48.760Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p>由于训练的样本通常会存在小量的错误标签，这些错误的标签会影响预测的结果，为了减少模型对训练集的依赖，增强模型的泛化能力，采用标签平滑的思路进行解决：在训练时假设标签可能存在错误，避免过分地相信模型的标签，“告诉”模型样本的标签不一定正确，则训练出来的模型对于少量的样本错误就有“免疫力”。</p><p>在二分类任务中，训练样本为(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.625em;vertical-align:-.19444em"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span>),<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.625em;vertical-align:-.19444em"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span>为样本标签，即0或者1，而在训练中每次迭代时，并不直接将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_i,y_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.75em"></span><span class="strut bottom" style="height:1em;vertical-align:-.25em"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>放入训练中集中，而是设置一个错误率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.43056em;vertical-align:0"></span><span class="base textstyle uncramped"><span class="mord mathit">ϵ</span></span></span></span>,以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">1-\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.64444em"></span><span class="strut bottom" style="height:.72777em;vertical-align:-.08333em"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit">ϵ</span></span></span></span>的概率将样本直接代入，以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.43056em;vertical-align:0"></span><span class="base textstyle uncramped"><span class="mord mathit">ϵ</span></span></span></span>的概率代入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><mn>1</mn><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_i,1-y_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.75em"></span><span class="strut bottom" style="height:1em;vertical-align:-.25em"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>，则模型在训练时，既有正确的标签输入，又有错误的标签输入，这样训练出来的模型不会“全力匹配”每一个标签，而只是在一定程度上匹配，因此出现错误标签时，模型受到的影响就会降低。</p><p>当采用交叉熵来描述损失函数时，对于每一个样本而言，标签变换成了</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mrow><mi>ϵ</mi><mo separator="true">,</mo></mrow></mtd><mtd><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>1</mn><mo>−</mo><mi>ϵ</mi><mo separator="true">,</mo></mrow></mtd><mtd><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">y_i = \begin{cases} \epsilon, &amp; y_i=0\\ 1-\epsilon, &amp; y_i = 1 \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.75em"></span><span class="strut bottom" style="height:3.0000299999999998em;vertical-align:-1.25003em"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist"><span style="top:-.6819999999999999em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">ϵ</span><span class="mpunct">,</span></span></span><span style="top:.7579999999999999em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit">ϵ</span><span class="mpunct">,</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="arraycolsep" style="width:1em"></span><span class="col-align-l"><span class="vlist"><span style="top:-.6819999999999999em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span><span style="top:.7579999999999999em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.03588em">y</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p>即当标签为0时，不把0直接代入训练，而是替换成一个较小的数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.43056em;vertical-align:0"></span><span class="base textstyle uncramped"><span class="mord mathit">ϵ</span></span></span></span>,同理，当标签为1时，替换成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">1-\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.64444em"></span><span class="strut bottom" style="height:.72777em;vertical-align:-.08333em"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit">ϵ</span></span></span></span>。所谓平滑即两个极端的值0和1替换成不那么极端的值；在多分类任务中，仍然假设标签值在一定概率下不变，以一定概率变为其他值，若假设均匀分布，则把所有的标签1变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">1-\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.64444em"></span><span class="strut bottom" style="height:.72777em;vertical-align:-.08333em"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit">ϵ</span></span></span></span>，所有的标签0变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>ϵ</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac \epsilon {k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.695392em"></span><span class="strut bottom" style="height:1.0987230000000001em;vertical-align:-.403331em"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:.345em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:.03148em">k</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span style="top:-.22999999999999998em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-.394em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">ϵ</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;由于训练的样本通常会存在小量的错误标签，这些错误的标签会影响预测的结果，为了减少模型对训练集的依赖，增强模型的泛化能力，采用标签平滑的思路进行解
      
    
    </summary>
    
      <category term="cv" scheme="http://aier02.com/categories/cv/"/>
    
    
      <category term="sensetime" scheme="http://aier02.com/tags/sensetime/"/>
    
      <category term="regularization" scheme="http://aier02.com/tags/regularization/"/>
    
  </entry>
  
  <entry>
    <title>independent component analysis</title>
    <link href="http://aier02.com/2018/12/16/independent_component/"/>
    <id>http://aier02.com/2018/12/16/independent_component/</id>
    <published>2018-12-16T12:42:23.350Z</published>
    <updated>2018-12-16T14:59:53.745Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/ICA/IMG_3728.jpg" alt=""></p><p><img src="/images/181216/ICA/IMG_3730.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/ICA/IMG_3728.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>singular value decomposition</title>
    <link href="http://aier02.com/2018/12/16/singular_value_decomposit/"/>
    <id>http://aier02.com/2018/12/16/singular_value_decomposit/</id>
    <published>2018-12-16T12:41:34.425Z</published>
    <updated>2018-12-16T15:00:01.717Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/SVD/IMG_3725.jpg" alt=""></p><p><img src="/images/181216/SVD/IMG_3726.jpg" alt=""></p><p><img src="/images/181216/SVD/IMG_3727.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/SVD/IMG_3725.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>principal component analysis</title>
    <link href="http://aier02.com/2018/12/16/principal_component/"/>
    <id>http://aier02.com/2018/12/16/principal_component/</id>
    <published>2018-12-16T12:40:51.673Z</published>
    <updated>2018-12-16T15:00:11.897Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/PCA/IMG_3721.jpg" alt=""></p><p><img src="/images/181216/PCA/IMG_3722.jpg" alt=""></p><p><img src="/images/181216/PCA/IMG_3723.jpg" alt=""></p><p><img src="/images/181216/PCA/IMG_3724.jpg" alt=""></p><p><img src="/images/181216/PCA/IMG_3725.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/PCA/IMG_3721.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>mixture of Gaussian</title>
    <link href="http://aier02.com/2018/12/16/mixture_of_Gau/"/>
    <id>http://aier02.com/2018/12/16/mixture_of_Gau/</id>
    <published>2018-12-16T12:39:57.674Z</published>
    <updated>2018-12-16T15:00:20.365Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/GAUSSIAN_MIXTURE/IMG_3717.jpg" alt=""></p><p><img src="/images/181216/GAUSSIAN_MIXTURE/IMG_3718.jpg" alt=""></p><p><img src="/images/181216/GAUSSIAN_MIXTURE/IMG_3719.jpg" alt=""></p><p><img src="/images/181216/GAUSSIAN_MIXTURE/IMG_3720.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/GAUSSIAN_MIXTURE/IMG_3717.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>exception maximization</title>
    <link href="http://aier02.com/2018/12/16/exception_maximization/"/>
    <id>http://aier02.com/2018/12/16/exception_maximization/</id>
    <published>2018-12-16T12:39:07.498Z</published>
    <updated>2018-12-16T15:03:43.711Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/EM/IMG_3714.jpg" alt=""></p><p><img src="/images/181216/EM/IMG_3715.jpg" alt=""></p><p><img src="/images/181216/EM/IMG_3716.jpg" alt=""></p><p><img src="/images/181216/EM/IMG_3717.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/EM/IMG_3714.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/image
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>bayesian statistic</title>
    <link href="http://aier02.com/2018/12/16/bayesian_statist/"/>
    <id>http://aier02.com/2018/12/16/bayesian_statist/</id>
    <published>2018-12-16T12:37:36.576Z</published>
    <updated>2018-12-16T15:00:54.868Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/BAYESIAN_STATISTIC/IMG_3711.jpg" alt=""></p><p><img src="/images/181216/BAYESIAN_STATISTIC/IMG_3712.jpg" alt=""></p><p><img src="/images/181216/BAYESIAN_STATISTIC/IMG_3713.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/BAYESIAN_STATISTIC/IMG_3711.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>feature selection</title>
    <link href="http://aier02.com/2018/12/16/feature_selection/"/>
    <id>http://aier02.com/2018/12/16/feature_selection/</id>
    <published>2018-12-16T12:36:22.956Z</published>
    <updated>2018-12-16T15:01:29.782Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/FEATURE_SELECTION/IMG_3709.jpg" alt=""></p><p><img src="/images/181216/FEATURE_SELECTION/IMG_3710.jpg" alt=""></p><p><img src="/images/181216/FEATURE_SELECTION/IMG_3711.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/FEATURE_SELECTION/IMG_3709.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>empirial risk minimization</title>
    <link href="http://aier02.com/2018/12/16/empirial_risk_minimize/"/>
    <id>http://aier02.com/2018/12/16/empirial_risk_minimize/</id>
    <published>2018-12-16T12:35:49.024Z</published>
    <updated>2018-12-16T15:02:02.606Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/ERM/IMG_3706.jpg" alt=""></p><p><img src="/images/181216/ERM/IMG_3707.jpg" alt=""></p><p><img src="/images/181216/ERM/IMG_3708.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/ERM/IMG_3706.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>kernel method</title>
    <link href="http://aier02.com/2018/12/16/kernel_method/"/>
    <id>http://aier02.com/2018/12/16/kernel_method/</id>
    <published>2018-12-16T12:34:21.064Z</published>
    <updated>2018-12-16T15:05:13.356Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/KERNEL_METHOD/IMG_3703.jpg" alt=""></p><p><img src="/images/181216/KERNEL_METHOD/IMG_3704.jpg" alt=""></p><p><img src="/images/181216/KERNEL_METHOD/IMG_3705.jpg" alt=""></p><p><img src="/images/181216/KERNEL_METHOD/IMG_3706.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/KERNEL_METHOD/IMG_3703.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img 
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>Lagrange multiplian</title>
    <link href="http://aier02.com/2018/12/16/Lagrange_multiplian/"/>
    <id>http://aier02.com/2018/12/16/Lagrange_multiplian/</id>
    <published>2018-12-16T12:32:02.432Z</published>
    <updated>2018-12-16T15:05:31.241Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/LAGRANGE_MULTIPLIAN/IMG_3700.jpg" alt=""></p><p><img src="/images/181216/LAGRANGE_MULTIPLIAN/IMG_3701.jpg" alt=""></p><p><img src="/images/181216/LAGRANGE_MULTIPLIAN/IMG_3702.jpg" alt=""></p><p><img src="/images/181216/LAGRANGE_MULTIPLIAN/IMG_3703.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/LAGRANGE_MULTIPLIAN/IMG_3700.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>naive Bayes</title>
    <link href="http://aier02.com/2018/12/16/naive_Bayse/"/>
    <id>http://aier02.com/2018/12/16/naive_Bayse/</id>
    <published>2018-12-16T12:29:24.745Z</published>
    <updated>2018-12-16T15:06:47.058Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/NAIVE_BAYSE/IMG_3698.jpg" alt=""></p><p><img src="/images/181216/NAIVE_BAYSE/IMG_3699.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/NAIVE_BAYSE/IMG_3698.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>generative learning algorithms</title>
    <link href="http://aier02.com/2018/12/16/generative_learning_algorithms/"/>
    <id>http://aier02.com/2018/12/16/generative_learning_algorithms/</id>
    <published>2018-12-16T12:27:05.959Z</published>
    <updated>2018-12-16T12:27:49.137Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><img src="/images/181216/GLA/IMG_3696.jpeg" alt=""></p><p><img src="/images/181216/GLA/IMG_3697.jpeg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/181216/GLA/IMG_3696.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ima
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>logistic regression</title>
    <link href="http://aier02.com/2018/12/16/logistic_regression/"/>
    <id>http://aier02.com/2018/12/16/logistic_regression/</id>
    <published>2018-12-16T11:54:52.916Z</published>
    <updated>2018-12-16T12:23:40.477Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p>​ <img src="/images/181216/LR/IMG_3691.jpg" alt=""></p><p>​ <img src="/images/181216/LR/IMG_3692.jpg" alt=""></p><p>​ <img src="/images/181216/LR/IMG_3693.jpg" alt=""></p><p>​ <img src="/images/181216/LR/IMG_3694.jpg" alt=""></p><p>​ <img src="/images/181216/LR/IMG_3695.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;​ &lt;img src=&quot;/images/181216/LR/IMG_3691.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;​ &lt;img src=&quot;/i
      
    
    </summary>
    
      <category term="cs229n" scheme="http://aier02.com/categories/cs229n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>leetcode linked list</title>
    <link href="http://aier02.com/2018/11/23/leetcode_linked_list/"/>
    <id>http://aier02.com/2018/11/23/leetcode_linked_list/</id>
    <published>2018-11-23T02:00:17.093Z</published>
    <updated>2018-12-09T07:13:02.720Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><h3 id="2-add-two-numbers两个链表的对应节点值相加"><a class="markdownIt-Anchor" href="#2-add-two-numbers两个链表的对应节点值相加"></a> 2. Add Two Numbers（两个链表的对应节点值相加）</h3><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="comment"># @return a ListNode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="comment">#串行进位加法器</span></span><br><span class="line">        carry=<span class="number">0</span><span class="comment">#记录进位</span></span><br><span class="line">        res=n=ListNode(<span class="number">0</span>)<span class="comment">#创建结果节点</span></span><br><span class="line">        <span class="comment">#依次将l1和l2对应节点的val进行相加，每次加完后将指针往前移一位</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            <span class="comment">#每次循环必须得先初始化两个节点的值为0，再根据节点的情况进行赋值</span></span><br><span class="line">            v1=v2=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                v1=l1.val</span><br><span class="line">                l1=l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                v2=l2.val</span><br><span class="line">                l2=l2.next</span><br><span class="line">            <span class="comment">#使用divmod()实现求商和余数，从而得到进位和本位和</span></span><br><span class="line">            carry,val=divmod(v1+v2+carry,<span class="number">10</span>)</span><br><span class="line">            <span class="comment">#创建对应的节点</span></span><br><span class="line">            n.next=ListNode(val)</span><br><span class="line">            <span class="comment">#指定下一个节点</span></span><br><span class="line">            n=n.next</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure><h3 id="19-remove-nth-node-from-end-of-list移除从后往前数的第n个节点"><a class="markdownIt-Anchor" href="#19-remove-nth-node-from-end-of-list移除从后往前数的第n个节点"></a> 19. Remove Nth Node From End of List（移除从后往前数的第n个节点）</h3><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#找到从头开始搜索的要移除的节点的位置，记录为t</span></span><br><span class="line">        l=<span class="number">1</span></span><br><span class="line">        temp=head.next</span><br><span class="line">        <span class="keyword">while</span> temp!=<span class="keyword">None</span>:</span><br><span class="line">            l+=<span class="number">1</span></span><br><span class="line">            temp=temp.next</span><br><span class="line">        t=l-n</span><br><span class="line">        <span class="keyword">if</span> t==<span class="number">0</span>:</span><br><span class="line">            head=head.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp=head</span><br><span class="line">            j=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j&lt;t:</span><br><span class="line">                temp=temp.next</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            temp.next=temp.next.next</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="23-merge-k-sorted-lists合并k个已经排好序的链表"><a class="markdownIt-Anchor" href="#23-merge-k-sorted-lists合并k个已经排好序的链表"></a> 23. Merge k Sorted Lists（合并k个已经排好序的链表）</h3><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><p><strong>Example:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p>比较直接的做法是使用经典的合并算法，这里的做法是直接读取所有节点值，然后统一进行排序后以链表的形式进行表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ls=[]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> t!=<span class="keyword">None</span>:</span><br><span class="line">                ls.append(t.val)</span><br><span class="line">                t=t.next</span><br><span class="line">        ls.sort()</span><br><span class="line">        head=fhead=ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ls)):</span><br><span class="line">            head.next=ListNode(ls[i])</span><br><span class="line">            head=head.next</span><br><span class="line">        <span class="keyword">return</span> fhead.next</span><br></pre></td></tr></table></figure><h3 id="25-reverse-nodes-in-k-group"><a class="markdownIt-Anchor" href="#25-reverse-nodes-in-k-group"></a> 25. Reverse Nodes in k-Group</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        count,node=<span class="number">0</span>,head</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">and</span> count&lt;k:</span><br><span class="line">            node=node.next</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count&lt;k:<span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#翻转后返回的是该段翻转之后的头节点prev，和下一个需要翻转的部分的头节点temp</span></span><br><span class="line">            temp,prev=self.reverse(head,k)</span><br><span class="line">            <span class="comment">#本段翻转后，原来的head成了尾部，需要和下一段的头进行对接，故每次都要返回翻转之后的头prev</span></span><br><span class="line">            head.next=self.reverseKGroup(temp,k)</span><br><span class="line">            <span class="keyword">return</span> prev</span><br><span class="line">    <span class="comment">#每次翻转后要保留断开位置的前一个节点和后一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self,head,k)</span>:</span></span><br><span class="line">        prev,cur,nxt=<span class="keyword">None</span>,head,head</span><br><span class="line">        <span class="keyword">while</span> k&gt;<span class="number">0</span>:</span><br><span class="line">            nxt=cur.next</span><br><span class="line">            cur.next=prev</span><br><span class="line">            prev=cur</span><br><span class="line">            cur=nxt</span><br><span class="line">            k-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (cur,prev)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;2-add-two-numbers两个链表的对应节点值相加&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
      <category term="algorithms" scheme="http://aier02.com/categories/algorithms/"/>
    
    
      <category term="linked list" scheme="http://aier02.com/tags/linked-list/"/>
    
      <category term="leetcode" scheme="http://aier02.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode hash table</title>
    <link href="http://aier02.com/2018/11/23/leetcode_hash_table/"/>
    <id>http://aier02.com/2018/11/23/leetcode_hash_table/</id>
    <published>2018-11-23T01:36:36.136Z</published>
    <updated>2018-12-09T07:12:55.099Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p>hash table是指对目标值进行一定变换后映射到表中的某个位置（或者某个值），可以用list或者dict实现这个哈希表</p><h3 id="1-two-sum"><a class="markdownIt-Anchor" href="#1-two-sum"></a> 1. Two Sum</h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sum_dict=&#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] <span class="keyword">in</span> sum_dict:</span><br><span class="line">                    <span class="keyword">return</span> [sum_dict[nums[i]],i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">#用key值保存索引值，key对应的value为差值</span></span><br><span class="line">                    sum_dict[target-nums[i]]=i</span><br></pre></td></tr></table></figure><p>这个sum_dict的关键在于他的转换是将数组中每个值与target的差值保存为key，查表时只要查找是否数组中存在这样的差值即可找到相应的两个和为target的元素。</p><h3 id="3-longest-substring-without-repeating-characters"><a class="markdownIt-Anchor" href="#3-longest-substring-without-repeating-characters"></a> 3. Longest Substring Without Repeating Characters</h3><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"abcabcbb"</span></span><br><span class="line">Output: <span class="number">3</span> </span><br><span class="line">Explanation: The answer <span class="keyword">is</span> <span class="string">"abc"</span>, <span class="keyword">with</span> the length of <span class="number">3.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        dic, res, start, = &#123;&#125;, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, ch <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="comment"># when char already in dictionary</span></span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="comment"># check length from start of string to index</span></span><br><span class="line">                res = max(res, i-start)</span><br><span class="line">                <span class="comment"># update start of string index to the next index</span></span><br><span class="line">                start = max(start, dic[ch]+<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># add/update char to/of dictionary </span></span><br><span class="line">            dic[ch] = i</span><br><span class="line">        <span class="comment"># answer is either in the begining/middle OR some mid to the end of string</span></span><br><span class="line">        <span class="keyword">return</span> max(res, len(s)-start)</span><br></pre></td></tr></table></figure><p>用dict记录每个出现过的字母和他的索引，若遇到重复的字母则更新res和重新记录的开始位置。</p><h3 id="18-4sum"><a class="markdownIt-Anchor" href="#18-4sum"></a> 18. 4Sum</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>], <span class="keyword">and</span> target = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">A solution set <span class="keyword">is</span>:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">-2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#先进行排序，这样做的好处是后期对两个数字进行搜索时可以更加方便的移动l和r指针</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        results=[]</span><br><span class="line">        self.findNsum(nums,target,<span class="number">4</span>,[],results)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNsum</span><span class="params">(self,nums,target,N,result,results)</span>:</span></span><br><span class="line">        <span class="comment">#检查在剩余的nums中查找target的可能性</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;N <span class="keyword">or</span> N&lt;<span class="number">2</span> <span class="keyword">or</span> target&lt;nums[<span class="number">0</span>]*N <span class="keyword">or</span> target&gt;nums[<span class="number">-1</span>]*N:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> N==<span class="number">2</span>:</span><br><span class="line">            <span class="comment">#在数组中首尾进行搜索和为target的两个位置</span></span><br><span class="line">            l,r=<span class="number">0</span>,len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r:</span><br><span class="line">                <span class="comment">#找到目标值</span></span><br><span class="line">                <span class="keyword">if</span> target==nums[l]+nums[r]:</span><br><span class="line">                    results.append(result+[nums[l],nums[r]])</span><br><span class="line">                    l+=<span class="number">1</span></span><br><span class="line">                    <span class="comment">#当前后l指定的数字相同时，l+1，跳过这个重复的值</span></span><br><span class="line">                    <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> nums[l<span class="number">-1</span>]==nums[l]:</span><br><span class="line">                        l+=<span class="number">1</span></span><br><span class="line">                <span class="comment">#两个指针对应的值和小于target，因为nums[r]已经最大，所以往前移动l</span></span><br><span class="line">                <span class="keyword">elif</span> nums[l]+nums[r]&lt;target:</span><br><span class="line">                    l+=<span class="number">1</span></span><br><span class="line">               <span class="comment">#往后移动r</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="comment">#深度优先搜索，每次先确定一个值，在剩余的nums中寻找修改后的target</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)-N+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> (i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i<span class="number">-1</span>]!=nums[i]):</span><br><span class="line">                    self.findNsum(nums[i+<span class="number">1</span>:],target-nums[i],N<span class="number">-1</span>,result+[nums[i]],results)</span><br></pre></td></tr></table></figure><p>先对nums进行排序，然后迭代的每次保留一个数字然后往后进行搜索，直到只剩下两个数字时使用两个指针从首尾进行搜索，特别注意相同数字的处理，当两个数字相同时，l要继续往前+1。</p><h3 id="30-substring-with-concatenation-of-all-words"><a class="markdownIt-Anchor" href="#30-substring-with-concatenation-of-all-words"></a> 30. Substring with Concatenation of All Words</h3><p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p><p><strong>Example 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]</span><br><span class="line">Output: [<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">Explanation: Substrings starting at index <span class="number">0</span> <span class="keyword">and</span> <span class="number">9</span> are <span class="string">"barfoor"</span> <span class="keyword">and</span> <span class="string">"foobar"</span> respectively.</span><br><span class="line">The output order does <span class="keyword">not</span> matter, returning [<span class="number">9</span>,<span class="number">0</span>] <span class="keyword">is</span> fine too.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s = <span class="string">"wordgoodstudentgoodword"</span>,</span><br><span class="line">  words = [<span class="string">"word"</span>,<span class="string">"student"</span>]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span><span class="params">(self, s, words)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(words) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># initialize d, l, ans</span></span><br><span class="line">        l = len(words[<span class="number">0</span>])</span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="comment">#用字典d记录words中出现的各个word的次数</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> d:</span><br><span class="line">                d[w] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[w] = <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># sliding window(s)</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="comment">#left指针用于指示左端第一个有效字符的起始位置</span></span><br><span class="line">        <span class="comment">#count用于记录当前有效的word数目</span></span><br><span class="line">            left = k</span><br><span class="line">            subd = &#123;&#125;</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="comment">#处理开始索引k，k必定在一个l的范围内</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k, len(s)-l+<span class="number">1</span>, l):</span><br><span class="line">                tword = s[j:j+l]</span><br><span class="line">                <span class="comment"># valid word，即该字符串出现在words中</span></span><br><span class="line">                <span class="keyword">if</span> tword <span class="keyword">in</span> d:</span><br><span class="line">                    <span class="keyword">if</span> tword <span class="keyword">in</span> subd:</span><br><span class="line">                        subd[tword] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        subd[tword] = <span class="number">1</span></span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    <span class="comment">#纠正某个单词的数目，若超过了words中的数目则需要进行前向调整</span></span><br><span class="line">                    <span class="keyword">while</span> subd[tword] &gt; d[tword]:</span><br><span class="line">                        subd[s[left:left+l]] -= <span class="number">1</span></span><br><span class="line">                        left += l</span><br><span class="line">                        count -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> count == len(words):</span><br><span class="line">                        ans.append(left)</span><br><span class="line">                <span class="comment"># not valid</span></span><br><span class="line">                <span class="comment">#遇到无效的单词时，需要重新计算left的位置，默认下一个单词有效，同时需要重新统计字典</span></span><br><span class="line">                <span class="comment">#这种解法关键在于使用两个字典分别统计words中各个单词出现的次数，当统计到的有效单词数目一致时则认为是有效的连续字串</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = j + l</span><br><span class="line">                    subd = &#123;&#125;</span><br><span class="line">                    count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>这里的hash tabel为一个字典，记录了words中各个单词的数目。</p><h3 id="36-valid-sudoku"><a class="markdownIt-Anchor" href="#36-valid-sudoku"></a> 36. Valid Sudoku</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],</span><br><span class="line">  [<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],</span><br><span class="line">  [<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#set中存储的是不重复的元素</span></span><br><span class="line">        big = set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j]!=<span class="string">'.'</span>:</span><br><span class="line">                    cur = board[i][j]</span><br><span class="line">                    <span class="comment">#记录board中数字出现的列，行，还有所在单独的3x3的区域的位置，9x9分为了9个区域，用两个索引可以表示3x3在9x9的位置</span></span><br><span class="line">                    <span class="keyword">if</span> (i,cur) <span class="keyword">in</span> big <span class="keyword">or</span> (cur,j) <span class="keyword">in</span> big <span class="keyword">or</span> (int(i/<span class="number">3</span>),int(j/<span class="number">3</span>),cur) <span class="keyword">in</span> big:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                    <span class="comment">#一行中是否有重复数字</span></span><br><span class="line">                    big.add((i,cur))</span><br><span class="line">                    <span class="comment">#一列中是否有重复数字</span></span><br><span class="line">                    big.add((cur,j))</span><br><span class="line">                    big.add((int(i/<span class="number">3</span>),int(j/<span class="number">3</span>),cur))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>关键在于如何存储表示第i行出现了某个数字，第j列出现了某个数字，第n个区域出现了某个数字。通过行和列确定区域所在的位置。</p><h3 id="37-sudoku-solver"><a class="markdownIt-Anchor" href="#37-sudoku-solver"></a> 37. Sudoku Solver</h3><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p><ol><li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li><li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li><li>Each of the the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li></ol><p>Empty cells are indicated by the character <code>'.'</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment">#检查在(row,col)位置插入k值后是否还是有效的数独板</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board, row, col, k)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[row][i] != <span class="string">'.'</span> <span class="keyword">and</span> board[row][i] == k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[j][col] != <span class="string">'.'</span> <span class="keyword">and</span> board[j][col] == k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        r1 = (row // <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line">        c1 = (col // <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(r1, r1+<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(c1, c1+<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">'.'</span> <span class="keyword">and</span> board[i][j] == k:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        self.board = board</span><br><span class="line">        self.solve(board)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="comment">#找到空缺的位置</span></span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">                        <span class="comment">#检查在（i，j）插入k之后是否有效</span></span><br><span class="line">                        <span class="keyword">if</span> self.isValidSudoku(board, i, j, str(k)):</span><br><span class="line">                            <span class="comment">#令（i，j）为k</span></span><br><span class="line">                            board[i][j] = str(k)</span><br><span class="line">                            <span class="comment">#递归检查是否能solve</span></span><br><span class="line">                            <span class="keyword">if</span> self.solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                        <span class="comment">#无效则回溯</span></span><br><span class="line">                        board[i][j] = <span class="string">'.'</span></span><br><span class="line">                    <span class="comment">#进行了所有尝试都无效则返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment">#前面没有返回flase则成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>每次尝试在空缺位置插入一个值，检查插入后board是否还是有效的，无效则进行回溯，尝试下一个值。</p><h3 id="49-group-anagrams"><a class="markdownIt-Anchor" href="#49-group-anagrams"></a> 49. Group Anagrams</h3><p>Given an array of strings, group anagrams together.</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"ate"</span>,<span class="string">"eat"</span>,<span class="string">"tea"</span>],</span><br><span class="line">  [<span class="string">"nat"</span>,<span class="string">"tan"</span>],</span><br><span class="line">  [<span class="string">"bat"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#字符串匹配问题，如何实现快速匹配而不是一个一个字母匹配</span></span><br><span class="line">        <span class="comment">#构造一个hash函数，使得含有相同字母的str都映射到统一个位置</span></span><br><span class="line">        <span class="comment">#方法一是进行排序，没有构造hash function</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        dic=&#123;&#125;</span></span><br><span class="line"><span class="string">        for s in strs:</span></span><br><span class="line"><span class="string">            sp=''.join(sorted(s))</span></span><br><span class="line"><span class="string">            if sp in dic:</span></span><br><span class="line"><span class="string">                dic[sp].append(s)</span></span><br><span class="line"><span class="string">            else:</span></span><br><span class="line"><span class="string">                dic[sp]=[s]</span></span><br><span class="line"><span class="string">        return list(dic.values())</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#方法二是构造一个tuple记录字母出现的位置</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(s)</span>:</span></span><br><span class="line">            res=[<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">                res[ord(c)-ord(<span class="string">'a'</span>)]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> tuple(res)</span><br><span class="line">        <span class="comment">#tuple对应的索引</span></span><br><span class="line">        dic=&#123;&#125;</span><br><span class="line">        <span class="comment">#记录结果</span></span><br><span class="line">        res=[]</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            t=convert(s)</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">in</span> dic:</span><br><span class="line">                res[dic[t]].append(s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append([s])</span><br><span class="line">                dic[t]=len(res)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>构造一个tuple表，使得字符串映射到字符位置固定的tuple中，这样做能使得相同字母构造的不同字符串能到映射到相同的位置。</p><p><strong>hash table的核心思想是使得具有某种规律的输入映射到相同的输出，在python 中用字典的形式存储这种key-value的对应关系，具体的关系要根据实际问题进行设计</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;hash table是指对目标值进行一定变换后映射到表中的某个位置（或者某个值），可以用list或者dict实现这个哈希表&lt;/p&gt;&lt;h3 id=
      
    
    </summary>
    
      <category term="algorithms" scheme="http://aier02.com/categories/algorithms/"/>
    
    
      <category term="leetcode" scheme="http://aier02.com/tags/leetcode/"/>
    
      <category term="hash table" scheme="http://aier02.com/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>VGG</title>
    <link href="http://aier02.com/2018/11/12/VGG/"/>
    <id>http://aier02.com/2018/11/12/VGG/</id>
    <published>2018-11-12T03:28:24.262Z</published>
    <updated>2018-11-19T11:38:09.607Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><a href="https://arxiv.org/pdf/1409.1556.pdf" target="_blank" rel="noopener">read paper online</a></p><h3 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h3><p>主要工作是观察加深网络深度在大型图像分类问题上的效果，使用3x3的卷积核来加深CNNs到16-19层，这种做法使得该模型在ILSVCR2014取得了第一和第二的成绩。</p><h3 id="1-introduction"><a class="markdownIt-Anchor" href="#1-introduction"></a> 1 INTRODUCTION</h3><p>介绍了今年convnet取得的成就，越来越多人尝试从不同方面改进convnet取实现更高的分类准确率；有的修改感受野的大小，使用小的步长，或者从训练和测试的时候使用图片的大小和数量入手。而本文关注的是convnet的深度，所有卷积层使用的filter均为3x3，增加了整体的深度。结果取得了当时在ILSVR中最好的结果，而且在其他数据集中都是最好的。最后说明了本文各个section和appendix中的主要内容。</p><h3 id="2-convnet-configurations"><a class="markdownIt-Anchor" href="#2-convnet-configurations"></a> 2 CONVNET CONFIGURATIONS</h3><p>所有卷积层的配置使用同一个规则。</p><h4 id="21-architecture"><a class="markdownIt-Anchor" href="#21-architecture"></a> 2.1 ARCHITECTURE</h4><p>固定大小为224x224的RGB图片，预处理是每张图片减去整个训练集图像的RGB均值，卷积核为3x3，另外1x1的卷积核可以看作是输入channel的线性变换，卷积步长为1，padding为1，空间池化为在某些卷积层后使用最大池化层2x2,步长为2，但不是所有卷积层都使用；所有卷积层后接3层fc，前两层为4096个channel的fc，第三层为1000个channel；整个网络的最后一层为sofmax。</p><p>所有隐藏层都使用Relus作为激活函数，只有一层使用了LRN。</p><h4 id="22-configurations"><a class="markdownIt-Anchor" href="#22-configurations"></a> 2.2 CONFIGURATIONS</h4><p>卷积层中的channel从64每次经过一个pooling层则翻倍最后到512channel。</p><h4 id="23-discussion"><a class="markdownIt-Anchor" href="#23-discussion"></a> 2.3 DISCUSSION</h4><p>和目前为止的模型不同之处在于在开始的conv layer不使用大的感受野，而是在整个网络中都只使用3x3，显然两个这样的卷积层堆叠起来的感受野为5x5，中间不经过pooling层，同理3层堆叠为7x7，这样做的作用是一方面把使用3个RLUs替代一个，使得决策函数更加有影响力；另一方面3个3x3的参数相较于一个7x7的参数更少，前者为3(3<sup>2C</sup>2),即27C<sup>2,后者为7</sup>2C<sup>2=49C</sup>2;</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1409.1556.pdf&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="paper" scheme="http://aier02.com/categories/paper/"/>
    
    
      <category term="cv" scheme="http://aier02.com/tags/cv/"/>
    
      <category term="paper reading" scheme="http://aier02.com/tags/paper-reading/"/>
    
  </entry>
  
  <entry>
    <title>AlexNet</title>
    <link href="http://aier02.com/2018/10/30/AlexNet/"/>
    <id>http://aier02.com/2018/10/30/AlexNet/</id>
    <published>2018-10-30T02:56:58.917Z</published>
    <updated>2018-11-03T09:23:15.726Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><p><a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="noopener">read paper online</a></p><h3 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h3><ul><li>训练集和测试集均来自ImageNet</li><li>网络框架的结构为5层conv layer，接一个max pooling和3层fully connected layer</li><li>训练过程中使用的方法，高效的GPU代码和减少overfitting的dropout</li><li>项目达到的成就，当时最好的测试误差率</li></ul><h3 id="1-introduction"><a class="markdownIt-Anchor" href="#1-introduction"></a> 1 Introduction</h3><p>当时的分类方法主要是高效地运用机器学习方法，要提高分类的表现可以从增大数据集、学习更强的模型和减少overfitting入手。</p><ol><li>更大的数据集:ImageNet数据集拥有1500万张高清图片并且含有22000个种类</li><li>更好的模型:CNN模型能有效地处理大量的图片，他的参数相较于传统的前向神经网络要少，更加容易去训练。</li><li>更好的训练方法:在GPU上高效地实现二维卷积能有效地加快训练的过程。</li></ol><p>该paper特别的贡献，以及当时硬件的限制。</p><h3 id="2-the-dataset"><a class="markdownIt-Anchor" href="#2-the-dataset"></a> 2 The Dataset</h3><p>介绍具体使用的数据集的来源、图片大小、图片种类、图片数量,以及训练过程中加入的图像预处理。</p><p>paper中使用的pre-processing为图像下采样为256x256，pixel值减去整个训练集的中值，最后使用的是RGB格式的纯pixel值。</p><p>top1就是你预测的label取最后概率向量里面最大的那一个作为预测结果，你的预测结果中概率最大的那个类必须是正确类别才算预测正确。而top5就是最后概率向量最大的前五名中出现了正确概率即为预测正确。故top-1 error rate 和 top-5 error rate都是在该错误率定义下在test data set中的概率。</p><h3 id="3-the-architecture"><a class="markdownIt-Anchor" href="#3-the-architecture"></a> 3 The Architecture</h3><p>介绍使用的CNN框架中新颖的设计</p><h4 id="31-relu-nonlinearity"><a class="markdownIt-Anchor" href="#31-relu-nonlinearity"></a> 3.1 ReLU Nonlinearity</h4><p>训练时使用GD 算法,饱和的非线性函数如tanh(x) 和 sigmoid function (1 + e−x)−1 使得训练的时间要比不饱和的非线性函数f(x) = max(0,x),称为Rectified Linear Units要长。通过图例说明饱和的activation function比不饱和的收敛得更慢。</p><h4 id="32-training-on-multiple-gpus"><a class="markdownIt-Anchor" href="#32-training-on-multiple-gpus"></a> 3.2 Training on Multiple GPUs</h4><p>受限于硬件设备，将整个网络(神经元)平分到2个GPU中进行并行计算，GPU能够直接读写别的GPU的内存而不占用主机的内存;两个GPU的沟通只在特定的layer进行,沟通是指两者产生feature maps作为对方的输入,不沟通就是只用该GPU产生的feature maps作为下一层的输入。</p><h4 id="33-local-response-normalizationno-idea"><a class="markdownIt-Anchor" href="#33-local-response-normalizationno-idea"></a> 3.3 Local Response Normalization（no idea==）</h4><p>Relus不需要为了避免饱和而进行输入的规范化，</p><h4 id="34-overlapping-pooling"><a class="markdownIt-Anchor" href="#34-overlapping-pooling"></a> 3.4 Overlapping Pooling</h4><p>pooling unit的strke和size一致，为tradiitonal local pooling，strike小于size则会发生overlapping。</p><h4 id="35-overall-architecture"><a class="markdownIt-Anchor" href="#35-overall-architecture"></a> 3.5 Overall Architecture</h4><p>fully connected layers中的神经元是一个和feature map大小一致的filter，全连接层的目的是高度提取特征，将feature map浓缩为一个数字，用于后面的分类或者回归。在最后一个卷积层输出到全连接层中，将输入看作一个neuron表示一张feature map，所有输入都得连接到每一个全连接层的neuron中，该过程和普通的卷积层类似，不同点在于全连接层的每一个w与单个feature map大小一致而且每一个输出都为一个数字，而卷积层的大小自定而且输出为一张feature map。</p><h3 id="4-reducing-overfitting"><a class="markdownIt-Anchor" href="#4-reducing-overfitting"></a> 4 Reducing Overfitting</h3><p>整个网络中有六千万个参数，尽管从image到label的映射中存在10位二进制的约束，但是如此多的参数无可避免会存在过拟合。</p><h4 id="41-data-augmentation"><a class="markdownIt-Anchor" href="#41-data-augmentation"></a> 4.1 Data Augmentation</h4><p>一般先提及以往的方法，指出不足之处后提出自己的做法，突出自己的优势。</p><p>在GPU进行训练的过程中，利用CPU对还未训练的图像进行小量的改变，故可以说数据增强在计算代价上面是“免费的”。（CPU的计算代价远小于GPU）</p><ul><li>图像平移和水平翻转:从原图和翻转后的图像中(256x256)分别随机选取224x224的区域作为增强后的图像进行训练，这种做法虽然增加了训练集的大小，但是显然部分数据存在内部的依赖(那为啥还这么做呢？给出理由),实际情况是不使用这种增强的模式，训练会出现严重的overfitting，迫使使用小的网络，权衡之后这种方式还是有效的。在测试的时候，分别在原图和翻转后的图像定位选取5个子区域，四个角的224x224，还有中心位置的224x224，即一张原图产生了10张用于测试的图像,进行预测时即对这十张图片的softmax得到的值进行平均得到某个class的最大值为预测值。</li><li>改变训练图像的RGB通道强度，对训练集中的RGB像素进行PCA，然后对三个通道的值进行成比例的修改。(这里没看懂)</li></ul><h4 id="42-dropout"><a class="markdownIt-Anchor" href="#42-dropout"></a> 4.2 Dropout</h4><p>集成学习对于减少错误率非常有效，但是对于大型的网络而言该做法计算代价太大，dropout能同时兼顾两者，既能实现不同的网络，同时能降低训练成本；对于每一个隐藏层的neuron，以0.5的概率对他的输出进行归零，即该神经元在本次训练(包括fp和bp)均失效；每一个epoch均可能是不同的结构，这种做法会导致训练次数的增多(大致一倍)才使得模型收敛，在test的时候，根据概率论的知识，每一个神经元的输出要乘以0.5，才和训练时的设置保持一致；本文中的dropout在后两层的全连接层实现。</p><h3 id="5-details-of-learning"><a class="markdownIt-Anchor" href="#5-details-of-learning"></a> 5 Details of learning</h3><ul><li>训练过程中使用了SGD算法，一个batch为128张图片，momentum为0.9，weight decay为0.0005，实验发现这个0.0005对于减少错误率很重要(玄学？)</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>:</mo><mo>=</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>9</mn><mo>∗</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo>−</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>0</mn><mn>0</mn><mn>0</mn><mn>5</mn><mo>∗</mo><mi>ϵ</mi><mo>∗</mo><msub><mi>w</mi><mi>i</mi></msub><mo>−</mo><mi>ϵ</mi><mo>∗</mo><mo>&lt;</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac><msub><mi mathvariant="normal">∣</mi><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow></msub><msub><mo>&gt;</mo><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow></msub><msub><mi>w</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>:</mo><mo>=</mo><msub><mi>w</mi><mrow><mi>i</mi></mrow></msub><mo>+</mo><msub><mi>v</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">v_{i+1}:=0.9*v_{i}-0.0005*\epsilon*w_i-\epsilon*&lt;\frac{\partial L}{\partial W}|_{w_i}&gt;_{D_i} w_{i+1}:=w_{i}+v_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-.686em"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.03588em">v</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">:</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">9</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit" style="margin-right:.03588em">v</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">5</span><span class="mbin">∗</span><span class="mord mathit">ϵ</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit" style="margin-right:.02691em">w</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.02691em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathit">ϵ</span><span class="mbin">∗</span><span class="mrel">&lt;</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:.686em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm" style="margin-right:.05556em">∂</span><span class="mord mathit" style="margin-right:.13889em">W</span></span></span></span><span style="top:-.22999999999999998em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-.677em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm" style="margin-right:.05556em">∂</span><span class="mord mathit">L</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">∣</span><span class="vlist"><span style="top:.15000000000000002em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:.02691em">w</span><span class="vlist"><span style="top:.15em;margin-right:.07142857142857144em;margin-left:-.02691em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel"><span class="mrel">&gt;</span><span class="vlist"><span style="top:.15000000000000002em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:.02778em">D</span><span class="vlist"><span style="top:.15em;margin-right:.07142857142857144em;margin-left:-.02778em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:.02691em">w</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.02691em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">:</span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:.02691em">w</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.02691em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:.03588em">v</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.03588em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span></span></p><p>i是epoch的轮数，v是动量变量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.43056em"></span><span class="strut bottom" style="height:.43056em;vertical-align:0"></span><span class="base textstyle uncramped"><span class="mord mathit">ϵ</span></span></span></span>是learning rate，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac><msub><mi mathvariant="normal">∣</mi><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow></msub><msub><mo>&gt;</mo><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow></msub></mrow><annotation encoding="application/x-tex">&lt;\frac{\partial L}{\partial W}|_{w_i}&gt;_{D_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.8801079999999999em"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-.345em"></span><span class="base textstyle uncramped"><span class="mrel">&lt;</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:.345em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm" style="margin-right:.05556em">∂</span><span class="mord mathit" style="margin-right:.13889em">W</span></span></span></span><span style="top:-.22999999999999998em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-.394em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm" style="margin-right:.05556em">∂</span><span class="mord mathit">L</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">∣</span><span class="vlist"><span style="top:.15000000000000002em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:.02691em">w</span><span class="vlist"><span style="top:.15em;margin-right:.07142857142857144em;margin-left:-.02691em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel"><span class="mrel">&gt;</span><span class="vlist"><span style="top:.15000000000000002em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:.02778em">D</span><span class="vlist"><span style="top:.15em;margin-right:.07142857142857144em;margin-left:-.02778em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span>是在第i次的batch中损失函数关于w的导数的平均值。</p><ul><li><p>对于每一层中的w的初始化，使用的是均值为0，标准差为0.01的高斯分布，而对于2，4，5卷积层和全连接层的bias，初始化为1，其他bias初始化为0；使得训练初始阶段Relus有正数输入，训练加快。</p></li><li><p>所有层使用相同的初始化学习率0.01，然后在训练过程中手工调整，启发式做法是当验证的错误率不在减少时，对当前的学习率进行/10操作。</p></li></ul><h3 id="6-results"><a class="markdownIt-Anchor" href="#6-results"></a> 6 Results</h3><p>和其他model进行对比，突出自己的成绩，横向对比。</p><h3 id="7-discussion"><a class="markdownIt-Anchor" href="#7-discussion"></a> 7 Discussion</h3><p>强调卷积神经网络大且深的重要性，并对未来的工作进行展望，本文为希望用在视频序列帧中。</p><h3 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h3><p>所有引用的文章出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;http://papers.nips.cc/paper/4824-imagenet-classification-with-d
      
    
    </summary>
    
      <category term="paper" scheme="http://aier02.com/categories/paper/"/>
    
    
      <category term="cv" scheme="http://aier02.com/tags/cv/"/>
    
      <category term="paper reading" scheme="http://aier02.com/tags/paper-reading/"/>
    
  </entry>
  
  <entry>
    <title>backpropagation</title>
    <link href="http://aier02.com/2018/10/29/backpropagation/"/>
    <id>http://aier02.com/2018/10/29/backpropagation/</id>
    <published>2018-10-29T08:04:42.275Z</published>
    <updated>2018-11-21T08:28:53.411Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><ul><li><p><strong>backpropagation</strong>, which is a way of computing gradients of expressions through recursive application of <strong>chain rule</strong>. 反向传播算法通过链式法则计算梯度</p></li><li><p>in practice we usually only compute the gradient for the parameters (e.g. W,b) so that we can use it to perform a parameter update.一般实际中计算的是权重的梯度，用于更新权重，也可能计算输入x的梯度，用于可视化和解释是神经网络的工作</p></li></ul><h2 id="simple-expressions-and-interpretation-of-the-gradient"><a class="markdownIt-Anchor" href="#simple-expressions-and-interpretation-of-the-gradient"></a> Simple expressions and interpretation of the gradient</h2><ul><li>the derivative on each variable tells you the sensitivity of the whole expression on its value，导函数表明了整个函数对于不同自变量的敏感程度</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>+</mo><mi>h</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>h</mi><mfrac><mrow><mi>d</mi><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(x + h) = f(x) + h \frac{df(x)}{dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.427em"></span><span class="strut bottom" style="height:2.113em;vertical-align:-.686em"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">h</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit">h</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:.686em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">d</span><span class="mord mathit">x</span></span></span></span><span style="top:-.22999999999999998em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-.677em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p>表明了f(x)随x变化的幅度，即x变化h后，f(x+h)如何变化,自变量的变化量和函数值的变化量的关系。</p><ul><li><p>Even though the gradient is technically a vector, we will often use terms such as <em>“the gradient on x”</em> instead of the technically correct phrase <em>“the partial derivative on x”</em> for simplicity.出于方便，notebook中将对于x的偏导数说成对于x的梯度</p></li><li><p>he derivatives tell us nothing about the effect of such large changes on the inputs of a function; They are only informative for tiny, infinitesimally small changes on the inputs, as indicated by the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>lim</mi><mrow><mi>h</mi><mo>→</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\lim_{h \rightarrow 0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.69444em"></span><span class="strut bottom" style="height:.84444em;vertical-align:-.15em"></span><span class="base textstyle uncramped"><span class="mop"><span class="mop">lim</span><span class="vlist"><span style="top:.15em;margin-right:.05em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">h</span><span class="mrel">→</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span> in its definition.</p></li></ul><h2 id="compound-expressions-with-chain-rule"><a class="markdownIt-Anchor" href="#compound-expressions-with-chain-rule"></a> Compound expressions with chain rule</h2><p>利用微积分的知识求某个函数的导数有时候是十分困难的，或者相当的繁琐，这种情况下如何快速求出函数对某个参数的偏导数呢？此时，chain rule就很关键了。譬如存在函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo>)</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">f(x,y,z)=(x+y)z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.75em"></span><span class="strut bottom" style="height:1em;vertical-align:-.25em"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:.03588em">y</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:.04398em">z</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:.03588em">y</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:.04398em">z</span></span></span></span>,则使用chain rule有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set some inputs</span></span><br><span class="line">x = <span class="number">-2</span>; y = <span class="number">5</span>; z = <span class="number">-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perform the forward pass</span></span><br><span class="line">q = x + y <span class="comment"># q becomes 3</span></span><br><span class="line">f = q * z <span class="comment"># f becomes -12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perform the backward pass (backpropagation) in reverse order:</span></span><br><span class="line"><span class="comment"># first backprop through f = q * z</span></span><br><span class="line">dfdz = q <span class="comment"># df/dz = q, so gradient on z becomes 3</span></span><br><span class="line">dfdq = z <span class="comment"># df/dq = z, so gradient on q becomes -4</span></span><br><span class="line"><span class="comment"># now backprop through q = x + y</span></span><br><span class="line">dfdx = <span class="number">1.0</span> * dfdq <span class="comment"># dq/dx = 1. And the multiplication here is the chain rule!</span></span><br><span class="line">dfdy = <span class="number">1.0</span> * dfdq <span class="comment"># dq/dy = 1</span></span><br></pre></td></tr></table></figure><h2 id="intuitive-understanding-of-backpropagation"><a class="markdownIt-Anchor" href="#intuitive-understanding-of-backpropagation"></a> Intuitive understanding of backpropagation</h2><ul><li>Every gate in a circuit diagram gets some inputs and can right away compute two things: 1. its output value and 2. the <em>local</em> gradient of its inputs with respect to its output value.将函数拆分为各个初等函数的混合计算，可视化为一个circuit diagram，图中的每个节点为一个基本计算。每个节点都可以独立计算他的output和local gradient</li><li>Backpropagation can thus be thought of as gates communicating to each other (through the gradient signal) whether they want their outputs to increase or decrease (and how strongly), so as to make the final output value higher</li></ul><h2 id="modularity-sigmoid-example"><a class="markdownIt-Anchor" href="#modularity-sigmoid-example"></a> Modularity: Sigmoid example</h2><p>sigmoid function(logistic function):</p>\sigma(x) = \frac{1}{1+e^{-x}} \\\\ \rightarrow \hspace{0.3in} \frac{d\sigma(x)}{dx} = \frac{e^{-x}}{(1+e^{-x})^2} = \left( \frac{1 + e^{-x} - 1}{1 + e^{-x}} \right) \left( \frac{1}{1+e^{-x}} \right) = \left( 1 - \sigma(x) \right) \sigma(x)<!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jan 08 2019 15:50:45 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="cs231n" scheme="http://aier02.com/categories/cs231n/"/>
    
    
      <category term="notebook" scheme="http://aier02.com/tags/notebook/"/>
    
      <category term="chain rule" scheme="http://aier02.com/tags/chain-rule/"/>
    
      <category term="backpropagation" scheme="http://aier02.com/tags/backpropagation/"/>
    
  </entry>
  
</feed>
